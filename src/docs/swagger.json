{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Monitoring Sevice",
    "description": " RESTful API server that allows authenticated users to monitor URLs, and get detailed uptime reports about their availability, average response time, and total uptime/downtime.",
    "termsOfService": "https://monitoring-service/terms-of-service",
    "contact": {
      "name": "islam mostafa",
      "email": "islamghany3@gmail.com",
      "url": "https://github.com/islamghany"
    },
    "license": {
      "name": "Islam mostafa license",
      "url": "https://github.com/islamghany"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "the dev server"
    },
    {
      "url": "https://monitoring-service.com",
      "description": "the prod server"
    }
  ],
  "paths": {
    "/v1/users/": {
      "post": {
        "tags": ["users"],
        "description": "register a user",
        "operationId": "registerUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "422": {
            "$ref": "#/components/responses/FailedValidationResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/users/activate": {
      "put": {
        "tags": ["users"],
        "description": "active user after a register",
        "operationId": "activateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "409": {
            "$ref": "#/components/responses/EditConflictResponse"
          },
          "422": {
            "$ref": "#/components/responses/FailedValidationResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/users/login": {
      "post": {
        "tags": ["users"],
        "description": "User login",
        "operationId": "loginnUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticateUserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "422": {
            "$ref": "#/components/responses/FailedValidationResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "tags": ["users"],
        "description": "get current user",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "422": {
            "$ref": "#/components/responses/FailedValidationResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/checks/": {
      "post": {
        "tags": ["checks"],
        "description": "create check",
        "operationId": "createCheck",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Check"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "user logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestResponse"
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "422": {
            "$ref": "#/components/responses/FailedValidationResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "get": {
        "tags": ["reports"],
        "description": "obtain Report",
        "operationId": "getReports",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "the name of the check",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "tag inclueded",

            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckWithOrder"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/checks/{id}": {
      "get": {
        "tags": ["checks"],
        "description": "obtain check",
        "operationId": "getCheck",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckWithOrder"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/v1/report/{id}": {
      "get": {
        "tags": ["reports"],
        "description": "obtain Report",
        "operationId": "getReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the user",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationRequiredResponse"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundResponse"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "OrdersResponse": {
        "description": "a list of orders",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Order"
        }
      },
      "Order": {
        "description": "model containg the movie schema",
        "type": "object",
        "required": ["id", "pick_up_address", "delivery_address", "title"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "title": {
            "type": "string",
            "example": "Batman"
          },
          "pick_up_address": {
            "type": "string",
            "example": "Batman"
          },
          "delivery_address": {
            "type": "string",
            "example": "Batman"
          },
          "created_at": {
            "type": "string",
            "format": "date",
            "example": "2014-06-26T04:07:31.000Z"
          },
          "delivered_at": {
            "type": "string",
            "format": "date",
            "example": "2014-06-26T04:07:31.000Z"
          },
          "picked_up_at": {
            "type": "string",
            "format": "date",
            "example": "2014-06-26T04:07:31.000Z"
          },

          "status": {
            "type": "string",
            "enum": ["idle", "in_process", "delivered"],
            "description": "is used to indicate how many times this movies had been changed, it help so that we can make it not in the critical section"
          }
        }
      },

      "ErrorResponse": {
        "description": "Server Error",
        "type": "object",
        "nullable": false,
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "CreateOrder": {
        "description": "data required for create a movie",
        "type": "object",
        "nullable": false,
        "required": ["title", "pick_up_address", "delivery_address"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "title": {
            "type": "string",
            "example": "Batman"
          },
          "pick_up_address": {
            "type": "string",
            "example": "Batman"
          },
          "delivery_address": {
            "type": "string",
            "example": "Batman"
          }
        }
      },
      "Biker": {
        "type": "object",
        "nullable": false,
        "required": ["id", "name", "email", "password"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },

          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Sender": {
        "type": "object",
        "nullable": false,
        "required": ["id", "name", "email", "password"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },

          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "nullable": false,
        "required": ["id", "name", "email", "password"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },

          "email": {
            "type": "string"
          },
          "activated": {
            "type": "boolean"
          },
          "is_blocked": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Report": {
        "type": "object",
        "required": ["id", "name", "email", "password"],
        "nullable": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": ["up", "down"]
          },
          "availability": {
            "type": "number"
          },
          "outages": {
            "type": "number"
          },
          "alertTimes": {
            "type": "number"
          },
          "downtime": {
            "type": "number"
          },
          "uptime": {
            "type": "number"
          },
          "responseTimes": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "history": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },

          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Check": {
        "type": "object",
        "nullable": false,
        "required": ["name", "url", "protocol"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },

          "url": {
            "type": "string"
          },
          "protocol": {
            "type": "string",
            "enum": ["HTTP", "HTTPS", "TCP"]
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int8"
          },
          "webhook": {
            "type": "string"
          },
          "timeout": {
            "type": "number"
          },
          "threshold": {
            "type": "number"
          },
          "interval": {
            "type": "number"
          },

          "authentication": {
            "type": "object",
            "properties": {
              "username": { "type": "string" },
              "password": { "type": "string" }
            }
          },
          "asserts": {
            "type": "object",
            "properties": {
              "code": { "type": "number" }
            }
          },
          "httpHeaders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": { "type": "string" },
                "value": { "type": "string" }
              }
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreSSL": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date"
          },
          "updated_at": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "CheckWithOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Check"
          },
          {
            "type": "object",
            "properties": {
              "report": {
                "$ref": "#/components/schemas/Report"
              }
            }
          }
        ]
      },
      "CreateUser": {
        "type": "object",
        "nullable": false,
        "required": ["name", "username", "password", "email"],
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "nullable": false,
        "required": ["user", "type"],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "AuthenticateUserResponse": {
        "type": "object",
        "nullable": false,
        "required": ["user", "token", "type"],
        "properties": {
          "user": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Biker"
              },
              {
                "$ref": "#/components/schemas/Sender"
              }
            ]
          },
          "token": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["biker", "sender"]
          }
        }
      },

      "AuthenticateUser": {
        "type": "object",
        "nullable": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },

      "SuccessResponse": {
        "description": "success operation",
        "type": "object",
        "properties": {
          "messgae": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "ServerError": {
        "description": "Server Error",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "NotFoundResponse": {
        "description": "the requested resource could not be found - 404",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "FailedValidationResponse": {
        "description": "Invlaid Input data - 422",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "BadRequestResponse": {
        "description": "Bad Request - 400",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "EditConflictResponse": {
        "description": "Edit Conflict Error - 409",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "AuthenticationRequiredResponse": {
        "description": "must be authenticated to access this resource - 401",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      },
      "NotPermittedResponse": {
        "description": "user account doesn't have the necessary permissions to access this resource - 403",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              ]
            }
          }
        }
      }
    },
    "requestBodies": {
      "AddOrder": {
        "description": "create order data",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CreateOrder"
                }
              ]
            }
          }
        }
      }
    }
  }
}
